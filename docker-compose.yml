version: '3'

services:

  rmq:
    image: rabbitmq:3-management
    container_name: rmq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 1s
      retries: 20
    networks:
      - mynetwork

  gateway:
    container_name: gateway-api
    depends_on:
      rmq:
        condition: service_healthy
    restart: on-failure:5
    links:
      - rmq
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    env_file:
      - ./apps/gateway/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '5000:5000'
      - "9229:9229"
    networks:
      - mynetwork

  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    depends_on:
      rmq:
        condition: service_healthy
      authDB:
         condition: service_healthy
    env_file:
      - ./apps/auth/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      mynetwork:

  order:
    container_name: order
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
    depends_on:
      rmq:
        condition: service_healthy
      orderDB:
        condition: service_healthy
    env_file:
      - ./apps/order/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      mynetwork:

  catalog:
    container_name: catalog
    build:
      context: .
      dockerfile: ./apps/catalog/Dockerfile
    depends_on:
      rmq:
        condition: service_healthy
      catalogDB:
        condition: service_healthy
    env_file:
      - ./apps/catalog/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      mynetwork:

  catalog-request:
    container_name: product-request
    build:
      context: .
      dockerfile: ./apps/catalog-request/Dockerfile
    depends_on:
      rmq:
        condition: service_healthy
      catalogRequestDB:
        condition: service_healthy
    env_file:
      - ./apps/catalog-request/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      mynetwork:

  cart:
    container_name: cart
    build:
      context: .
      dockerfile: ./apps/cart/Dockerfile
    depends_on:
      rmq:
        condition: service_healthy
      cartDB:
        condition: service_healthy
    env_file:
      - ./apps/cart/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      mynetwork:

  catalogDB:
    container_name: catalogDB
    image: postgres:12
    env_file:
      - ./apps/catalog/.env
    environment:
      PG_DATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5432:5432
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - catalogDB_data:/var/lib/postgresql/data
    networks:
      mynetwork:

  catalogRequestDB:
    container_name: catalogRequestDB
    image: postgres:12
    env_file:
      - ./apps/catalog-request/.env
    environment:
      PG_DATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5433:5432
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - catalogRequestDB_data:/var/lib/postgresql/data
    networks:
      mynetwork:

  orderDB:
    container_name: orderDB
    image: postgres:12
    env_file:
      - ./apps/order/.env
    environment:
      PG_DATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5434:5432
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - orderDB_data:/var/lib/postgresql/data
    networks:
      mynetwork:

  cartDB:
    container_name: cartDB
    image: postgres:12
    env_file:
      - ./apps/cart/.env
    environment:
      PG_DATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5435:5432
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - cartDB_data:/var/lib/postgresql/data
    networks:
      mynetwork:

  authDB:
    container_name: authDB
    image: postgres:12
    env_file:
      - ./apps/auth/.env
    environment:
      PG_DATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5436:5432
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - authDB_data:/var/lib/postgresql/data
    networks:
      mynetwork:

networks:
  mynetwork:
    driver: bridge

volumes:
  catalogDB_data:
  catalogRequestDB_data:
  orderDB_data:
  cartDB_data:
  authDB_data: